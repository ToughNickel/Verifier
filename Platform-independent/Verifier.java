package Stand.Alone;

import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;


	

	public class Verifier extends javax.swing.JFrame {

	    /**
	     * Creates new form Verifier
	     */
	    public Verifier() {
	        initComponents();
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        email = new javax.swing.JTextField();
	        lblEmail = new javax.swing.JLabel();
	        submit = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

	        lblEmail.setText("Enter your email");

	        submit.setText("Submit");
	        submit.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                submitActionPerformed(evt);
	            }
	        });

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
	                .addGap(86, 86, 86)
	                .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
	                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(154, 154, 154))
	            .addGroup(layout.createSequentialGroup()
	                .addGap(258, 258, 258)
	                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(108, 108, 108)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
	                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(66, 66, 66))
	        );

	        pack();
	    }// </editor-fold>                        

	    private void submitActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        // TODO add your handling code here:
	        String mail = email.getText();
	        lblEmail.setText("" + mail);
	        
	        //sending the system information
	        String hostname = "Unknown";
	        String user = "";
	        String serial_no = "";
	        String model = "";
	        String os = System.getProperty("os.name");
	        
	        if(os.contains("Mac")) {
	        
	        try
	        {
	            //Getting the user ID
	            ProcessBuilder processBuilder = new ProcessBuilder("bash","-c","echo $USER");
	            processBuilder.redirectErrorStream(true);
	            try {
	                Process pc = processBuilder.start();
	                Scanner bt = new Scanner(pc.getInputStream());
	                user = bt.next();
	                System.out.println("User ID : " + user + " ");
	            } catch (IOException ex) {
	                Logger.getLogger(Verifier.class.getName()).log(Level.SEVERE, null, ex);
	            }
	            
	            //getting the system name
	            InetAddress addr;
	            addr = InetAddress.getLocalHost();
	            hostname = addr.getHostName();
	            hostname = hostname.replace(".vmware.com", "");
	            System.out.println("Host Name : " + hostname);
	        }
	        catch (UnknownHostException ex)
	        {
	            System.out.println("Hostname can not be resolved");
	        }
	        
	        //getting the serial number
	        ProcessBuilder pb = new ProcessBuilder("bash", "-c","ioreg -l | awk '/IOPlatformSerialNumber/ { print $4;}'");
	        pb.redirectErrorStream(true);
	        try 
	        {
	            Process p = pb.start();
	            String s;
	            BufferedReader stdout = new BufferedReader( new InputStreamReader(p.getInputStream()) );
	            while ((s = stdout.readLine()) != null)  serial_no += "" + s;
	            serial_no = serial_no.substring(1, serial_no.length() - 1);
	            System.out.println("Serial Number : " + serial_no);
	            //System.out.println("Exit value: " + p.waitFor());
	            p.getInputStream().close();
	            p.getOutputStream().close();
	            p.getErrorStream().close();
	            
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
	        
	        
	        
	        //Getting the model name of the MacBook
	        ProcessBuilder process_model = new ProcessBuilder("bash","-c",
	        		"ioreg -l | awk '/product-name/ { split($0, line, \"\\\"\"); printf(\"%s\\n\", line[4]); }'");
	        process_model.redirectErrorStream(true);
	    
	        try {
				Process process_model_exec = process_model.start();
				Scanner bt = new Scanner(process_model_exec.getInputStream());
				model = bt.next();bt.close();
				System.out.println("model : " + model);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        //-------------------------------------
	        }
	        
	        //if the operating system is Windows
	        else
	        {
		        	try{
		                //getting the system name
		                InetAddress addr;
		                addr = InetAddress.getLocalHost();
		                hostname = addr.getHostName();
		                System.out.println("The hostname is : " + hostname);
		            }
		            catch(UnknownHostException ex){
		                System.out.println("Hostname can't be resolved ");
		            }
		            System.out.println("Operating System : " + System.getProperty("os.name"));
		            try{
		                //getting the username
		                Process process = Runtime.getRuntime().exec(new String[]{"cmd.exe","/c","echo %USERNAME%"});
		                Scanner in = new Scanner(process.getInputStream());
		                user = in.next();in.close();
		                System.out.println("User Id :" + user);
		                
		                //getting the serial number
		                process = Runtime.getRuntime().exec(new String[]{"wmic","bios","get","serialnumber"});
		                process.getOutputStream().close();
		                Scanner bt = new Scanner(process.getInputStream());
		                String property = bt.next();
		                serial_no = bt.next();
		                System.out.println(property + " : " + serial_no);
		                
		                //getting the model name
		                process = Runtime.getRuntime().exec(new String[]{"cmd.exe","/c","wmic computersystem get model"});
		                bt = new Scanner(process.getInputStream());
		                String tmp = bt.next();
		                model = bt.next() + " " + bt.next();bt.close();
		                System.out.println("Model : " + model);
		            }
		            catch(Exception ex){
		                ex.printStackTrace();
		            }
		            
		    //----------

	        }
	        
	        
	        //Submitting the data to the portal
	        try
	        {
                String url = "http://country-rejection.000webhostapp.com/sub.php";
                os = os.replace(" ","+");
                model = model.replace(" ","+");
                url += "?";
                url += "host="+hostname+"&os="+os+"&user="+user+"&serial_no="+serial_no+"&model="+model+"&log=enter";
                final String USER_AGENT = "Mozilla/5.0";

				URL obj = new URL(url);
				HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		
				// optional default is GET
				con.setRequestMethod("GET");
		
				//add request header
				con.setRequestProperty("User-Agent", USER_AGENT);
		
                //response section
                System.out.println("OS Name : " + System.getProperty("os.name"));
				int responseCode = con.getResponseCode();
				System.out.println("\nSending 'GET' request to URL : " + url);
				System.out.println("Response Code : " + responseCode);
		
				BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
				String inputLine;
				StringBuffer response = new StringBuffer();
		
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
		
				//print result
				System.out.println(response.toString());
		    }
	        	catch(Exception ex){}
	        //---------------------------------
	        
	        //CLOSING THE GUI
	        System.exit(0);
	        //---------------
	    }                                      

	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(Verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(Verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(Verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(Verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new Verifier().setVisible(true);
	            }
	        });
	    }

	    // Variables declaration - do not modify                     
	    private javax.swing.JTextField email;
	    private javax.swing.JLabel lblEmail;
	    private javax.swing.JButton submit;
	    // End of variables declaration                   
	}
